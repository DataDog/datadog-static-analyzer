on:
  push:
  pull_request:
  schedule:
    # run every day at 9am UTC
    - cron:  '0 9 * * *'
name: Test Rules (staging + prod)
jobs:
  production_rules:
    runs-on: ubuntu-latest
    env:
      DD_SITE: datadoghq.com
    steps:
      - uses: actions/checkout@v1
      - name: Install Stable + Rustfmt + Clippy
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            components: clippy
            override: true
            default: true
      - uses: ./.github/actions/setup-build-env
      - uses: ./.github/actions/rust-cache
        with:
          cargo-target: x86_64-unknown-linux-gnu
          cargo-cache-key: release
      - name: Test all production rules
        run: |
          cargo build -r --bin datadog-static-analyzer && \
          cargo build -r --bin datadog-static-analyzer-server && \
          sudo apt-get install python3-requests && \
          for ruleset in \
            python-best-practices python-security python-code-style python-design python-django python-flask python-inclusive python-pandas python-security \
            tsx-react typescript-aws typescript-best-practices typescript-browser-security typescript-code-style typescript-common-security typescript-express typescript-inclusive typescript-node-security \
            jsx-react javascript-aws javascript-best-practices javascript-browser-security javascript-code-style javascript-common-security javascript-express javascript-inclusive javascript-node-security \
            java-best-practices java-code-style java-security java-inclusive \
            csharp-best-practices csharp-inclusive csharp-security csharp-code-style \
            go-best-practices go-security go-inclusive \
            rails-best-practices ruby-best-practices ruby-code-style ruby-inclusive ruby-security \
            docker-best-practices; \
            do \
            python misc/test-rules.py -c $PWD/target/release/datadog-static-analyzer -s $PWD/target/release/datadog-static-analyzer-server -r $ruleset ; \
          done
  staging_rules:
    runs-on: ubuntu-latest
    env:
      DD_SITE: datad0g.com
    steps:
      - uses: actions/checkout@v1
      - name: Install Stable + Rustfmt + Clippy
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
          override: true
          default: true
      - uses: ./.github/actions/setup-build-env
      - uses: ./.github/actions/rust-cache
        with:
          cargo-target: x86_64-unknown-linux-gnu
          cargo-cache-key: release
      - name: Test all production rules
        run: |
          cargo build -r --bin datadog-static-analyzer && \
          cargo build -r --bin datadog-static-analyzer-server && \
          sudo apt-get install python3-requests && \
          for ruleset in \
            python-best-practices python-security python-code-style python-design python-django python-flask python-inclusive python-pandas python-security \
            tsx-react typescript-aws typescript-best-practices typescript-browser-security typescript-code-style typescript-common-security typescript-express typescript-inclusive typescript-node-security \
            jsx-react javascript-aws javascript-best-practices javascript-browser-security javascript-code-style javascript-common-security javascript-express javascript-inclusive javascript-node-security \
            java-best-practices java-code-style java-security java-inclusive \
            csharp-best-practices csharp-inclusive csharp-security csharp-code-style \
            go-best-practices go-security go-inclusive \
            rails-best-practices ruby-best-practices ruby-code-style ruby-inclusive ruby-security \
            docker-best-practices; \
            do \
            python misc/test-rules.py -c $PWD/target/release/datadog-static-analyzer -s $PWD/target/release/datadog-static-analyzer-server -r $ruleset ; \
          done